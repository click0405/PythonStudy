前倾回顾：

1.修改器 ： $set   $unset  $rename   $setOnInsert
            $inc   $mul    $max  $min
 
            $push   $pushAll  $pull  $pullAll
            $each  $position  $sort  
            $addToSet  $pop

2.数据类型 
      时间类型 ： Date()  ISODate()  valueOf()
    
      Null 类型： null 表示空或者匹配某个域不存在

      内嵌文档 ：通过  .  获取内部文档值

3. 索引操作
    createIndex()  ensureIndex（） createIndexes()
    dropIndex（）  dropIndexes()
    getIndexes()

    数据库比较大，并且查询操作较多的时候更适合使用索引

4. 聚合操作  
     aggregate()

         $group ---> $sum  $avg  $max  $min  $first $last

         $project 
  
         $match

**************************************************************
$limit  显示前几条文档

    e.g. 显示出先3条文档
         db.class0.aggregate({$limit:3})

$skip   跳过前几条文档显示后面内容

    e.g. 跳过前3条文档显示后面内容
         db.class0.aggregate({$skip:3})

$sort  对所选的域排序

    e.g. 对文档按年龄升序排序
         db.class0.aggregate({$sort:{age:1}})


聚合管道
    指的是将多个聚合操作合并到一起完成，即将上一个聚合的结果作    为下一个聚合的操作对象继续操作
 
    db.collection.aggregate([{聚合1},{聚合2}....])

    e.g.  先排序然后通过project进行显示设置
         db.class0.aggregate([{$sort:{age:1}},{$project:         {_id:0}}])

    1. 将所有男生按照年龄排序，不显示_id
       $match---> $sort --->$project
       db.class0.aggregate([{$match:{gender:'m'}},{$sort:       {age:1}},{$project:{_id:0}}])

    2. 统计一下班里有名字重复的同学
       $group --> $match
       db.class0.aggregate([{$group:{_id:'$name',num:       {$sum:1}}},{$match:{num:{$gt:1}}}])


固定集合 

    指的是mongodb中创建的固定大小的集合，称之为固定集合

    特点：能够淘汰早期数据
          可以控制集合的大小
          插入，查找速度较快

    使用：日志处理，临时缓存

    创建：db.createCollection(collection,         {capped:true,size:10000,max:1000})
    
          capped：true   创建固定集合
          size：10000    固定集合大小  字节
          max ： 1000    最多存放多少文档

    e.g.  创建固定集合size 1000  max 3
      db.createCollection('log',{capped:true,size:1000,max:3})


文件存储

    文件存储数据库的方式

    1. 存储路径 ： 将本地文件所在的路径以字符串存储到数据库

    优点 ： 节省数据库空间
    缺点 ： 当数据库或者文件发生移动时必须要修改数据库内容

    2. 存储文件本身 ： 将文件转换为二进制存储到数据库

    优点 ： 文件随数据库移动，数据库在文件即在
    缺点 ： 占用数据库空间大，存储效率低


GridFS文件存储方案

    目的 ： 更好的存储MongoDB中超过16M的大文件

    方案解释：在mongodb数据库中创建两个集合共同存储文件，一个              存储文件信息，一个存储文件内容。两个集合相互配合

              fs.files  : 存储文件信息（文件名，大小等）
              fs.chunks : 以mongodb二进制格式存储文件内容

    存储方法 ： mongofiles -d  dbname   put     file
                               数据库         要存储的文件

                * 数据库不存在会自动创建

                e.g. 将img.jpg 存到grid数据库中
                     mongofiles -d grid  put  ./img.jpg

    文件获取 ： mongofiles  -d  dbname   get  file
              
                * file目标文件为fs.files集合文档中 filaname值

                e.g. 从grid数据库中获取文件 
                     mongofiles -d grid get  ./img.jpg

    优缺点：
             优点 ：存储方便，提供了较好的命令，方便数据库移动
 
             缺点 ：读写效率较低，不建议用来存储小文件     


mongo shell对javascript支持

     在mongo shell下可以直接运行基本的js代码

     游标 ： 获取数据库操作结果集合的量

          var cursor = db.class0.find()  获取游标
          cursor.next()    通过游标获取文档内容
          cursor.hasNext() 查看是否有下一个文档


python 模块 --》 pymongo 第三方模块

    安装 ： sudo pip3 install pymongo

    操作步骤：
        1. 创建mongodb数据库连接对象
           
           conn = pymongo.MongoClient('localhost',27017)
  
        2. 生成要操作的数据库对象 (__getitem__ __setitem__)
           
           db = conn.stu
           db = conn['stu']

        3. 生成操作的集合对象
   
           myset = db.class0
           myset = db['class0']

        4. 通过集合对象调用函数进行数据库操作

        5. 关闭数据库连接
           conn.close()


插入操作

insert（） 插入一条或者多条文档
insert_many()  插入多条文档
insert_one()  插入一个文档

save()  插入一条文档，当有_id域时_id域重复会替换原文档
        * pymongo中save参数是字典不能为列表


查找操作

find()
功能： 查找所有文档
参数： 同mongo shell 中find
返回： 游标变量

* pymongo 操作数据库时中所有的操作符均使用引号引起来当做字符串  传入
* mongodb中 true false 使用python的 True  False即可
  null 使用python的None即可

cursor游标对象属性函数

next（）  获取下一个文档
limit()   显示前几条文档
skip()   跳过前几条显示后面内容
count()  统计计数
sort（） 排序
    pymongo : sort([('age',1),('name',-1)])
    mongo shell: sort({age:1,name:-1})

* 当使用游标对象调用limit skip sort等函数时，要求游标对象必须  为初始游标，即没有被for或next取值过


find_one() 
功能：查找一条文档
参数： 同find
返回： 返回一个字典


修改操作

update()
update_one()
update_many() 


删除操作

remove(query,multi=True)
* 默认删除多个，当multi设置为False时只删除一个

delete_one()
delete_many()


索引操作

create_index()   
功能 ： 创建索引
参数 ： 域名 则默认对该域创建正向索引
        传入列表，列表中每个二维元组代表一个索引项
        e.g.  [(age,-1)] 表示对age创建逆向索引

list_indexes()   查看索引 
drop_index()    删除一个索引
drop_indexes()  删除所有索引


聚合操作
aggregate([])
参数 ： 同mongoshell中的聚合
返回值 ： 返回一个和find函数相同的游标对象


文件操作 

    GridFS文件提取
  
       import gridfs
  
       1.连接数据库,生成数据库对象
       2.生成gridfs对象
          fs = gridfs.GridFS(db)
       3.通过fs获取存储的文件集合
          files = fd.find()
       4.挑选想获取的文件进行读取

    GridFS文件存储
 
       1.连接数据库,生成数据库对象
       2.生成gridfs对象
          fs = gridfs.GridFS(db)
       3.通过fs.put()函数将读取出来的文件内容存入数据库
          fs.put(data,filename)
          参数 ： data 要存入的二进制内容
                  filename  文件存入的名称

 
作业 ： 总结mongodb知识点 
        对比mongodb和mysql使用上的差别










