前情回顾

1.进程间通信
     共享内存 ： 在内存中开辟区域，效率较高
         Value() ----> 单一数据
         Array() ----> 数据结构    
     
     信号量 ： Semaphore() 创建信号量
               acquire() 消耗
               release() 增加
2. 创建多线程
     threading ---》 Thread  
          
         Thread()  创建线程对象
         start()   启动线程
         join()    回收线程
     
     线程对象属性
         name
         daemon
         is_alive
     
创建自己的线程类
     1. 继承Thread
     2. 编写自己的属性
     3. 重写run方法   

线程通信  ： 使用全局变量

    同步互斥方法
        Event()  
            set（）  clear（）  wait()   is_set()

        Lock（）
            acquire()   release()
  
线程的GIL ： 全局解释器锁 ---》 python线程效率低下

***********************************************************

进程线程的区别和联系

1.  两者都是多任务编程方式，都能够使用计算机的多核
2.  进程的创建和删除消耗的计算机资源比线程要多
3.  进程空间独立，数据互不干扰，有专门的通信方法。而线程使用全    局变量进行通信
4.  一个进程可以创建多个线程分支，两者之间存在包含关系
5.  多个线程公用进程的资源，在共享资源操作时往往需要同步互斥操    作
6.  进程线程都在系统中有自己的特有属性标志，如ID，代码段，命令    集等


使用场景
* 某个任务中并发比较多，此时多线程消耗资源较少
* 不同的独立的任务模块，用多进程相对空间比较好管理
* 在通信上考虑可行性，如果数据逻辑复杂需要的同步互斥较多，这时  使用线程同步互斥可能会容易出错

要求 ：
1. 进程线程的区别
2. 进程间通信都知道哪些，有什么特点
3. 什么是同步互斥，你在什么情况下使用
4. 给一个情形，分析用进程还是线程为什么
5. 问一些概念和处理方法， 僵尸进程   进程状态  线程效率

网络通信模型

什么是服务器？ 

    硬件服务器：主机   集群
       
    软件服务器：编写的服务端应用程序，在硬件服务器上运行，提供                一定的完成的后端服务

        httpserver --> 处理http请求
        webserver  --> 网站的后端服务程序
        邮箱服务器 --> 邮件处理
        ftp服务器  --> 文件处理

    前端   用户端   客户端   前台应用
    
        特征：与用户直接交互，提供给用户使用
        要求：良好的用户体验

    后端   服务端   后台应用
        
        特征：提供逻辑处理，数据处理
        要求：更高的并发量，更快的处理速度，更强的安全性
 

    服务器模型
        服务器的基本结构：c/s   客户端服务器模型
                          b/s   浏览器服务器模型


网络通信模型

    循环服务器模型：循环接收客户端请求，处理请求。同一时刻只能                    处理一个请求，处理完毕后再处理下一个

        优点 ： 实现简单，占用资源少
        缺点 ： 无法同时处理多个客户端请求
        
        适用情况 ： 处理的任务可以很快完成，不需要建立并发，                    udp比tcp更适合循环模型

    并发服务器模型：能够同时处理多个客户端的请求
        IO并发： io多路复用 

            优点 ： 资源消耗少，能同时处理多个IO
	    缺点 ： 只能监控IO事件，当多个任务都是CPU计算时无                      法同时处理
        
        多进程多线程并发: 为每个客户端创建单独的进程或者线程处                          理客户端请求
            优点 ： 每个客户端都可以长期占有服务器，能使用多核                    资源处理IO或者cpu计算
            缺点 ： 资源消耗较高


多进程并发

    基于fork完成多进程网络并发
    1. 创建套接字，绑定，监听
    2. 等待接收客户端连接请求  accept
    3. 当有新的客户端连接时，创建新的进程处理客户端请求
    4. 原有进程继续等待其他客户端连接，新的进程处理客户端具体       请求
    5. 如果客户端退出，则销毁对应的进程


ftp文件服务器 
 
功能 ： 1. 服务端和客户端两部分，要求启动服务器后可以有多个客           户端同时操作。
        2. 客户端可以查看服务器文件库中有什么文件（文件库只有            普通文件，不算隐藏文件）
        3. 客户端可以选择文件库的文件进行下载，下载到本地
        4. 客户端还可以上传本地文件到服务器文件夹（不设权限）
        5. 使用print打印一定的格式，作为命令的输入提示界面 

技术分析： fork并发  tcp传输  
           如何查看一个文件夹中的文件列表  os.listdir()
           如何判断是一个普通文件        os.path.isfile()

结构设计: 使用类将功能封装
工作步骤：先搭建网络连接
          设计类
          将功能函数写在类中，逐一实现并测试

具体功能 ： 1.搭建网络连接
 		服务端 ： 创建fork并发服务端程序	
	        客户端 ： 创建套接字，进行网络连接，连接成功后                           打印命令选项界面等待输入命令
    
            2.设计类

            3. 查看文件列表 
                客户端 ： 发送请求
                          接收服务端确认
                          循环接收服务器发来的文件名并打印

                服务端： 接收请求
                         判断可否执行反馈结果
                         发送文件名称  
            
            4. 下载文件
                 客户端 ： 发送请求  G filename
                           接收服务端确认
                           接收文件
                 
                 服务端 ： 接收请求
                           判断文件是否存在，反馈结果
                           发送文件

多线程并发
 
    基于threading模块
        1. 创建套接字，绑定监听
        2. 接收客户端请求
        3. 创建新的线程处理客户端请求
        4. 主线程继续等待其他客户端连接，分支线程处理具体请求
        5. 当客户端退出则线程退出

作业 ： 整理ftp文件服务器程序
        复习http协议
        基于Process的多进程并发服务端
















      
 
    